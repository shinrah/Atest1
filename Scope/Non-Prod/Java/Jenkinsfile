pipeline {
    agent any

    parameters {
        choice choices: ['Deploy', 'stop', 'start', 'restart'], description: 'Choose mode for deployment or starting the application server', name: 'mode'
        choice choices: ['DEV', 'master', 'UAT'], description: 'Choose environment to deploy master', name: 'host'
        choice choices: ['DEV', 'master', 'feature-branch', 'UAT'], description: 'Select Git branch to deploy', name: 'GIT_Branch_Tag'
    }

    stages {
        stage('Print environment and mode') {
            steps {
                script {
                    env.Host = sh(returnStdout: true, script: "echo ${params.host}").trim()
                    env.Mode = sh(returnStdout: true, script: "echo ${params.mode}").trim()
                    env.Deployment_Method = sh(returnStdout: true, script: "echo ${params.mode}").trim()
                    env.GitBranch = params.GIT_Branch_Tag
                }
            }
        }

        stage('Checkout Git Branch') {
            steps {
                git branch: "${env.GitBranch}", url: 'https://github.com/shinrah/JenkinsPipelineDemoProject.git'
            }
        }

        stage('Build Artifacts') {
            steps {
                script {
                    if (params.mode == "Deploy") {
                        currentBuild.displayName = "${params.host}_${params.mode}_${BUILD_NUMBER}"
                        def environment = "${params.host}"
                        def giturl = 'https://github.com/shinrah/JenkinsPipelineDemoProject.git'
                        def gitBranch = "${params.GIT_Branch_Tag}"

                        echo "Building artifacts for ${environment} from ${giturl}, branch ${gitBranch}"
                        // Add your actual build steps here
                    }
                }
            }
        }

        stage('Clean up') {
            steps {
                script {
                    cleanWs()
                    def gitBranch = "${params.GIT_Branch_Tag}"
                    if (gitBranch != "") {
                        echo "Formatted GIT branch tag is ${gitBranch}" // Placeholder; replace if needed
                    }
                }
            }
        }
    }
}
